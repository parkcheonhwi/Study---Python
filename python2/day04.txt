2) 넘파이 함수
	np.append(배열1, 배열2, 축)
		axis=0 첫번째 축
		axis=1 마지막 축

	np.delete(배열1,배열2, 축)
		변수에 재할당하고 사용
		두 배열의 차원이 일치하지 않으면 ValueError 발생
	np.arange(): 특정 범위에 있는 원소를 자동생성하기
		range(): 연속된 정수로만 만들 수 있음
		arange(): 실수로도 만들 수 있음

	np.astype(): 배열의 원소가 가지는 유형을 바꾸는 함수
	np.zeros((행, 열)): 모든 원소가 0으로만 이루어진 배열 만들기
	np.ones((행, 열)): 모든 원소가 1로만 이루어진 배열만들기
	np.transpose():행과 열 바꾸기

3) 배열의 사칙연산(원소끼리 사칙연산)
	 배열 덧셈/뺄셈: 같은 자리 원소끼리 더하거나 빼기
	배열 곱셈/ 나눗셈: 같은 자리 원소끼리 곱하거나 나누기
	크기가 서로 다른 배열끼리 사칙연산: 브로드캐스팅(broadcasting)기능

2. 판다스(Pandas)
	데이터 분석을 위한 효율적인 데이터 구조를 제공함
	서로 다른 여러가지 유형의 데이터를 공토으이 포맷으로 정리하는 것

1) 특징
	데이터를 읽어들이거나 그래프화 등 데이터 분석에 관한 작업이 쉽게 가능
	1차원 배열형태의 데이터 구조인 Series와 2차원 배열형태의 데이터구조 DataFrame

	공식문서  https://pandas.pydata.org/pandas-docs/stable/

2) 기본구조 
	import pandas as pd
	
3) 시리즈(Series)
	1차원의 배열의 값에 각 값에 대응되는 인덱스를 부여할 수 있는 구조
	시리즈 
		열의 이름(name), 행의 이름(index)
		별도 입력이 없을 때 행의 이름은 0부터 시작하는 정수값
		별도 입력이 없을 때 열의 이름은 빈값(None)
	딕션너리 구조와 유사
	정수형 위치 인덱스와 인덱스이름(인덱스 라벨)을 사용

(1) 기본구조
	import pandas as pd
	s=pd.Series(data, index= index, name=name)
		    데이터값   행의이름      열의 이름

	시리즈는 모든 데이터 유형(정수, 실수형, 문자열 등)을 담을 수 있음
	행 이름을 총칭해서 index, 열이름은 name속성을 가질 수 있음

2) 딕션너리 -> 시리즈 변환
	di={key:value}
	딕션너리 키값이 시리즈의 인덱스, 딕션너리의 value는 시리즈의 데이터 값으로 변환
	
	pd.Series(딕션너리)

	.index: 인덱스 값을 확인
	.values: 데이터값을 확인(리스트 형태로 출력)
	.dtype: 자료형 확인	

3) 리스트 -> 시리즈 변환	
	.index: 별로의 인덱스를 지정하지 않으면 자동으로 인덱스가 지정(0부터 시작)
		인덱스를 지정할 때 인덱스 값을 숫자가 아닌 문자열로 넣을 수 있음
	.values: 데이터 값을 확인(리스트형태로 출력)

4) 시리즈 -> 딕션너리 또는 리스트로 변환
	형변환
	dict(sr)
	list(sr)

5) 시리즈 값 수정, 추가, 삭제
	수정: key값으로 지정
		인덱스 값으로 지정

	추가: key값으로 지정
		위치 인덱스 지정할 경우 에러 발생

	삭제: del 객체명['key']
		객체명.pop('key값')
		객체명.drop('key값'):원본에서 삭제 시 inplace=True 로 설정

4. 데이터 프레임(DataFrame)
	배열과는 또 다른 형태로 데이터를 쉽게 가공하기 위한 일종의 틀
	2차원 리스트를 매개변수로 전달
	행방향 인덱스(index)와 열방향 인덱스(column)가 존재함 (행과 열을 가지는 자료구조)
	리스트, 딕션너리, 시리즈, 또 다른 데이터프레임으로 생성가능

1) 기본 구조
	  import pandas as pd
   	  df = pd.DataFrame(values, index = index, coulumns = columns)

2) 딕션너리 -> 데이터 프레임
	.DataFrame(딕션너리 객체)
	딕션너리 형 자료를 판다스로 가공할 수 있는 데이터 프레임으로 만들 수 있음
	딕션너리형 자료를 만들고 DataFrame()사용
	키값이 열이름으로 , 행인덱스에는 숫자가 붙음

3) 리스트 -> 데이터 프레임
   .DataFrame(2차원 배열, index = 행인덱스 배열, columns = 열이름 배열)
   딕셔너리는 열로 변환, 리스트에서는 행으로 변환

4)데이터 프레임-> 리스트
	.tolist()

5) 데이터 프레임 -> 딕션너리
	.to_dict(): 열이름은 키로 변환, 각 레코드는 값으로 변환, 인덱스는 키로 변환
		{key:{key:value}}
	.to_dict('list): 열이름은 키로 변환, 각 쌍은 리스트로 변환
	.to_dict('index'): 인덱스는 키로 변환, 각 레코드는 값으로 변환, 열이름은 키로 변환
		{index:{columns:value}}
	.to_dic('records): 각 행을 딕셔너리로 변환

6) 데이터 프레임 값 수정, 추가, 삭제
	수정
	df['새로운 행 또는 열이름']=값
	rename()		옵션, inplace=True 바로 df 원본에 저장됨
	rename(columns={변경전 열이름: 변경할 열이름}, inplace=True)

	추가
	df['새로운 행 또는 열이름']=값 기존 열이름이면 덮어씀, 마지막에 추가됨
	df.loc(새로운 행이름)=값

	삭제
	-행삭제
	df.drop(행 인덱스, axis=0, inplace=True)
	행삭제의 경우 axis=0 디폴트값으로 생략가능
	-열삭제
	df.drop(인덱스라벨, axis=1 or 'columns', inplace=True)

7) 행선택(loc, iloc)
	loc(label location): 인덱스 이름 기준으로 행 데이터 읽기
		.loc[행인덱스라벨, 열인덱스라벨]
	iloc(index label location): 행번호를 기준으로 행 데이터를 읽기(정수형 위치인덱스 사용할 때)
		.iloc[행인덱스, 열인덱스]

8) 열선택
   결과값으로 시리즈 객체를 반환
   df['columns_name']
   
   결과값으로 데이터 프레임을 반환
   df[['columns_name']]


5. 데이터 시각화
   데이터를 분석한 결과를 사용자가 쉽게 이해할 수 있도록 표현하여 전달하는 것

1) 데이터 시각화 필요한 이유
   많은 양의 데이터를 한번에 볼 수 있음
   전문지식이 없어도 데이터를 인지하고 사용할 수 있음
   단순한 데이터의 나열보다 정확한 분석결과를 얻을 수 있음
   단순한 데이터에서는 알 수 없는 중요한 정보들을 얻을 수 있음

2) 맷플로립(Matplotlib)
   다양한 데이터들을 많은 방법으로 도식화할 수 있는 파이썬 라이브러리
   공식문서
   https://matplotlib.org/

6. 맷플로립
1) 설치 및 실행방법
vs code> 터미널에서 pip install matplotlib
vs code, colabe >  import matplotlib.pyplot as plt

2) 기본개념
   figure : 그래프 전체 영역
   -> figure() 함수
   subplot : 실제 그래프를 그리는 영역, 하나의 figure 여러개의 subplot이 포함될 수 있음
   -> add_subplot() 함수

3) 기본 사용법
   import matplotlib.pyplot as plt
   figure = plt.figure()
   axes = figure.add_subplob(행, 열, 번호)
   * figure는 전체, subplot이 몇개인지는 add_subplot()에서 결정됨
   plt.show() #그래프 출력

4)plot() 함수
 	꺾은 선형 그래프를 그리는 함수
	plt(x,y) x축에서 사용할 데이터와 y축에서 사용할 데이터를 각각 리스트로 만든 뒤 인수로 전달