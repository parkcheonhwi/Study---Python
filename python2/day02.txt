day02
파이썬 총복습 -> 파일입출력

2일차 수업예제 링크
https://colab.research.google.com/drive/1tgV1nmRkaj1Qm5z2t_23szGGV9Z-C_Xc?usp=sharing

1. 파이썬 총복습
1) 사용자 정의함수
함수 정의
	def 함수명(매개변수):
		실행할문장
		return 리턴값

함수 호출
	매개변수x, 리턴값x 
		함수명()
	매개변수o, 리턴값x
		함수명(인수)
	매개변수x, 리턴값o
		변수 = 함수명()		print(변수)
		print(함수명())
	매개변수o, 리턴값o
		변수 = 함수명(인수)		print(변수)
		print(함수명(인수))

반환값(return value)
	함수 호출 결과를 의미
	함수 종료 의미도 가지고 있음

2) 변수
	전역변수
		함수 밖에서 선언한 변수
		전체에서 사용가능
	지역변수
		함수 내부에서 선언한 변수
		함수안에서만 사용가능

- 전역변수 값을 함수안에서 조회할 수 있고, global 키워드를 통해 함수 안에서
	전역변수를 바꾸어 줄 수 있다
	하지만 바람직하지 않다

(1) 전역변수 이름을 무엇으로 지을지 예측 불가능
(2) 함수안에서 전역변수를 함부로 바꾸게 될 경우 어떤 문제가 발생할지 모르기 때문이다
	=> 매개변수로 값만 복사해서 사용하고 return으로 값만 복사하여 되돌려주는
	   방식을 사용한다

3) 클래스
(1) 기본용어 정리
함수(function)
	특정 기능을 수행하는 코드의 묶음
	클래스안에서는 메소드라고 함
클래스(class)
	여러 변수와 함수(메소드)를 묶어서 처리할 수 있는 것
	공통된 요소들이 모여있는 하나의 틀
데이터 속성(data attribute)
	데이터 속성으로 데이터를 정의하는 것
	(self.변수에 데이터가 될 값을 대입해서 사용가능)
메소드(method)
	메소드로 처리를 정의하는 것
	(첫번째 인수를 self로 한 함수를 정의)
속성(attribute)
	데이터속성과 메소드를 합쳐서 부르는 말
객체(object)/인스턴스(instance)
	정의한 클래스를 실제로 이용하기 위해 사용
	클래스로부터 생성되는 각각의 존재가 인스턴스

(2) 클래스 선언
	class 클래스명:
		#속성(데이터속성, 메소드)
		def 메소드명(self, 매개변수):
			self.변수 = 매개변수  #데이터속성
			return 반환값

	self : self 객체 구별용 매개변수
	self.필드명으로 접근하면 여러 객체도 한번의 선언으로 구별하여 다룰수있음
	
(3) 클래스 사용
	추상적인 개념의 클래스로 객체를 만드는 작업을 객체화라고 한다
	클래스는 그 때 만들어진 객체의 타입이다

객체화 작업
	객체명 = 클래스명()

속성에 접근
	객체명.변수명
	객체명.메소드명()

(4) 생성자(constructor)
	인스턴스가 작성될 때 처음에 반드시 처리되는 메소드
	__init__(init : initalize)
	클래스를 통해서 객체를 생성하는 순간에 호출되는 특별한 메소드

형식
	class 클래스명:
		def __init__(self, 매개변수1, 매개변수2):
			self.변수1 = 매개변수1
			self.변수2 = 매개변수2

(5) 인스턴스 변수와 클래스 변수

	인스턴스 변수		클래스변수
	인스턴스마다 다른 값		공유하는 값
	인스턴스 접근o		인스턴스 접근o
	클래스명 접근x		클래스명 접근o

(6) 인스턴스 메소드, 클래스 메소드, 정적 메소드
	인스턴스 메소드 	클래스 메소드	정적 메소드
인스턴스		o		o		o
클래스		x		o		o
			@classmethod	@staticmethod
	매개변수 (self)	매개변수 (cls)	매개변수 없어도 가능

	클래스 호출 => 클래스명.메소드명()

4) 상속
	기존에 사용중인 클래스를 바탕으로 새로운 요소를 추가해서 클래스를 다시 정의하는 것
	(클래스를 확장한다)

	부모클래스		자식클래스
의미	상속해주는클래스	상속을받는클래스
용어	슈퍼클래스		서브클래스
	기반클래스		파생클래스
	상위클래스		하위클래스

(1) 서브클래스의 정의
	class 슈퍼클래스:
		def 슈퍼클래스에 추가할 메소드(self, 매개변수):
			self.슈퍼클래스에 추가할 데이터 속성 = 값

	class 서브클래스(슈퍼클래스명):
		def 서브클래스에 추가할 메소드(self, 매개변수):
			self.서브클래스에 추가할 데이터 속성 = 값

(2) 상속관계 구현
	IS-A 관계를 구현해야함
	=> ~은 ~이다라고 해석할 수 있는 관계를 의미함
	학생은 사람이다
	Student is Person
	서브클래스	    슈퍼클래스

(3) 서브클래스의 init()
	서브클래스는 슈퍼클래스가 없으면 존재할 수 없음
	서브클래스의 생성자를 구현할 때는 반드시 슈퍼클래스의 생성자를 먼저 호출하는 코드를 작성해야함

	class 슈퍼클래스명:
		def __init__(self, 매개변수):
			self.매개변수

	class 서브클래스명(슈퍼클래스명):
		def __init__(self, name):
			super().__init__(name)
	
5) 예외처리(Exception handling)
	예외처리의 목적은 어떤 문제가 발생했을 때 그 문제를 해결해주는 것이 아닌
	발생된 문제로 인해 프로그램이 비정상적으로 종료되는 것을 막고
	사용자에게 발생한 문제에 대한 정보를 전달하기 위함

예외처리 구조
	try:
		예외가 발생할 수 있는 문장(필수)
	except:
		예외발생시 수행할 문장(선택이지만 에러를 처리하려면 필수)
	else:
		에러가 나지 않으면 수행할 문장(선택이지만 except 없이는 올 수 없음)
	finally:
		예외 발생유무에 상관없이 무조건 수행할 문장(선택)

강제로 예외 발생시키기
	raise 예외클래스()	 
	or
	raise 예외클래스("문장")


2. 파일입출력
1) 기본입출력
	파일입력(input) : 기존의 파일 내용을 읽어들이는 것
	파일출력(output) : 기존 파일에 새로운 내용을 추가하거나 새로운 파일을 생성하는 것

① open() ~ .close()문
파일열기
	파일객체(f) = open(파일명, 모드, 인코딩방식)

	파일명
	open('test.txt')
	open('C:/data/test.txt') #절대경로로 작성
	open('./test/test.txt')  #상대경로 ./ 현재폴더를 의미
	open('../../test.txt')   #상대경로 ../ 상위폴더로 올라감을 의미

	모드
	파일 열기모드로 여는 파일의 속성을 지정함
	r : 읽기 모드, default
	w : 쓰기 모드, 파일이 없으면 만들겠다, 파일이 있으면 덮어씀
	a : 쓰기 모드, 파일이 없으면 만들겠다, 있으면 맨뒤에 이어서 씀
	x : 쓰기 모드, 파일이 없으면 만들겠다, 있으면 오류발생
	t : 텍스트모드,  우리눈에 읽힘
	b : 바이너리 모드, 음성, 이미지, 영상

	인코딩방식
	텍스트 파일의 인코딩 방식 지정
	encoding = 'utf-8'
	
파일 객체를 이용해 파일을 읽거나 쓰기
	파일 내용 읽기
	변수 = 파일객체.read()

	파일 내용 쓰기
	파일객체.write(str)

파일객체 닫기
	f.close()

② with(with statement)문 이용한 파일생성
	내장함수 open()과 close() 메소드를 사용해서 작성시에
	close()를 마지막에 작성하지 않으면 문제발생 가능성이 있음

	with문 사용해서 파일을 열면 도중에 처리가 종료하더라도 반드시 파일이 닫힘

with 처리 as 파일변수:
	f.write(str)
	#파일 쓰기 ()안에는 문자열로만 가능함


파일 읽기 메소드
	read(사이즈) : 사이즈를 생략하게 되면 다읽음
	readline() : 한 줄을 다 읽는 함수, 파일끝에 도달하면 리턴
	readlines(수) : 줄 단위로 리스트에 저장하여 리턴, 누적으로 읽은 글자수가 '수'를 넘어가면 종료


















	








