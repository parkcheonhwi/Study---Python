복습 -> 단순연결리스트(추가, ADT) -> 단순원형연결리스트 -> 스택

0. 복습
자료구조와 알고리즘
   자료구조 : 자료 처리를 위해 컴퓨터가 잘 다룰 수 있는 형태로 표현하는 구조
   알고리즘 : 문제를 해결하는 절차 또는 순서

자료구조 분류
   단순구조    : 기본자료형, 사용자정의자료형
   선형구조  : 데이터들이 일렬로 저장되는 형태(리스트, 연결리스트)
      스택, 큐, 데크
    비선형구조 : 데이터가 순차적이지 않고 복잡한 연결관계를 갖는 형태
      트리, 그래프
   파일구조  : 다양한 자료구조의 데이터를 파일에 저장하는 방식
      순차파일, 색인파일, 직접파일

1. 연결리스트
   노드(Node)들이 서로 연결된 형태로 구성된 선형 자료구조
      *노드 : 데이터(값) + 다음노드의 주소(포인터)
   요소를 저장하는 data 필드와 다음 노드를 가리키는 next(link)필드로 구성
   
1) 연결리스트 구성
   연결리스트의 접근 첫번째 노드부터 시작 -> 첫번째 노드를 밟은 다음 링크를 타고
   그 다음 노드들에 차례로 접근 -> 연결리스트의 객체는 리스트의 노드들을 직접
   저장할 필요가 없고 리스트의 첫번째 노드에 접근할 수 있는 레퍼런스만 갖고 있으면됨


2) 연결리스트 종류
   싱글 연결리스트(단일연결리스트, 단순연결리스트)
   더블 연결리스트(이중연결리스트)
   원형 연결리스트   - 단일원형연결리스트
         - 이중원형연결리스트

3) 노드 생성, 삭제, 삽입
   단순연결리스트는 다음 데이터를 가리키는 링크가 필요하며
   데이터와 링크로 구성된 항목을 노드(Node)라고 함

   짱구 -> 철수 -> 훈이 -> 맹구
   
4) 구성환경
   [데이터][다음주소값] -> [데이터][다음주소값] -> [데이터][None]

5) 연결리스트 ADT
   i번째 자리에 데이터 삽입
   i번째 데이터 삭제
   데이터x 인덱스 반환
   데이터x 개수 반환
   노드의 총 개수 반환
   연결리스트 비어있는지 확인
   모든 노드 삭제
   모든 노드의 데이터 출력

6) 필요연산
   insert(i, x)    : x를 연결리스트의 i번째 요소로 삽입(맨앞자리는 0번)
   append(x)    : 연결리스트의 맨 뒤에 요소 x를 추가
   pop(i)      : 연결리스트의 i번 요소를 삭제하면서 알려줌
   remove(x)   : 연결리스트에서 처음으로 나타나는 x를 삭제
   get(i)      : 연결리스트의 i번 요소를 알려줌
   index(x)   : 요소 x가 연결리스트의 몇번째 요소인지 알려줌
   isEmpty()   : 연결리스트가 빈리스트인지 알려줌(True, False)
   size()      : 연결리스트의 총 요소 수를 알려줌
   clear()      : 연결리스트를 깨끗이 비워줌
   count(x)   : 연결리스트에서 요소 x가 몇 번 나타나는지 알려줌
   extend(a)   : 연결리스트에 나열할 수 있는 객체(리스트, 튜플 등)  a를 풀어서 추가함
   copy()      : 연결리스트를 복사해서 새 연결리스트를 리턴함
   reverse()   : 연결리스트의 순서를 역으로 뒤집음
   sort()      : 연결리스트를 정렬함

2. 단일원형연결리스트
   단순연결리스트의 마지막 노드가 다시 첫번재 노드를 가리키도록 설정되어 리스트 형태가
   원형(circle)형태로 구성
   계속 회전하면서 연속으로 찾아갈 수 있음
   데이터 삽입에서 오버헤드가 발생하지 않음

1) 구성환경
   --[데이터][다음주소값] -> [데이터][다음주소값] -> [데이터][첫번째주소값]--
   |                          |
   |____________________________________________________________|         
   

2) 단일원형연결리스트 ADT
	리스트가 비어있는 지 확인
	크기 확인
	단일 원형연결리스트의 내용 출력
	특정 위치에 노드 삽입
	특정위치에 노드 삭제

+) 단일연결리스트, 이중연결리스트, 원형연결리스트의 장단점
단일연결리스트
	장점
	메모리를 효율적으로 사용할 수 있음
	노드의 사입, 삭제가 0(1) 시간에 가능함
	구현이 비교적 간단하고 적은 메모리 사용

	단점
	특정 노드를 찾으려면 처음부터 찾아야하므로(순회) 탐색 0(n)시간이 소요됨
	단방향으로만 이동이 가능하므로 역방향으로 이동은 어려움

이중연결리스트
	장점
	양방향으로 이동이 가능하므로 노드 검색이 용이함
	노드의 삽입, 삭제가 0(1) 시간에 가능함
	양방향으로 연결되어 있어서 역방향 탐색이 편리함
	
	단점
	단일연결리스트보다 메모리를 더 사용함
	구현이 복잡하고 코드의 양이 많아질 수 있음

원형연결리스트
	장점
	특정 노드에서 시작하여 전체 노드를 순회할 때 노드의 수만큼 순회하면 원래 위치로 돌아올 수 있음

	마지막노드와 첫번째 노드가 연결되어 있어서 순회가 용이함
	원형적인 구조로 알고리즘에서 활용할 수 있는 이점을 제공함

	단점
	특정 노드를 탐색하려면 전체 순회해야하므로 탐색에 0(n)시간이 소요됨
	삭제 연산이 복잡해짐

3. 스택(Stack)

	데이터가 입력되면 입력되는 순서대로 쌓고 나중에 들어온 것부터 먼저 사용하는 자료구조
	후입선출, LIFO(Las In First Out)형
	ex) 스택에 a,b,c,d를 순서대로 입력했다면 꺼낼때 d,c,b,a 순서로만 꺼낼 수 있다

	1) 활용예시
	-실행취소(ctrl +z)
	-글자 지우기
	- 웹 브라우저 방목기록
	-재귀적 알고리즘(재귀함수: 자기자신을 호출)

	2)스택의 추상데이터 타입(ADT)
		맨 윗부분에 요소를 추가
		맨 윗부분에 있는 요소를 알려준다
		맨 윗부분에 있는 요소를 삭제하면서 알려준다
		스택이 비어있는지 확인
		스택을 깨끗이 비운다

	3)주요함수
		push(): 삽입(쌓기), bottom부터 차례대로 삽입이 돈디ㅏ
		pop(): 삭제(꺼내기), top부터 차례대로 삭제되며, 해당함수는 top에 해당하는 값을 가져온다
		peek(): 엿보기, top어떤 요소가 있는지 살펴보는 함수(검색)
		clear(): 스택에 있는 모든 요소 삭제(removeAll)