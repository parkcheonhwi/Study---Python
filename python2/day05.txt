day05
데이터 시각화 -> 자료구조와 알고리즘 -> 리스트와 연결리스트의 차이

1. 데이터 시각화(맷플로립 Matplotlib
1) 기본 사용법
	import matplotlib.pyplot as plt
	figure= plt.figure()
	axes= figure.add_subplot(행, 열, 번호)
	plt.show()



2) plot 함수
	꺾은 선형 그래프를 그리는 함수
	plot(x,y) x축에서 사용할 데이터와 y축에서 사용할 데이터를 각각 리스트로 만든 뒤 인수로 전달
	
	linestlye		선 종류
	linewidth		선 굵기
	color		색상
	marker		데이터값에 마커표시

한글깨짐 해결법
	matplotlib에서 한글 사용시 깨짐현상
	
	!sudo apt-get install -y fonts-nanum
	!sudo fc-cashe -fv
	!rm ~/.chach/matplotlib -rf

	런타임 재시작
	
	plt.rc('font', family= "NanumBarunGothic")

3) bar()
	범주가 있는 데이터값을 직사격형의 막대로 표현하는 그래프
	어떤 데이터의 많고 적음을 나타낼때 주로 사용

4) scatter()
	산포 그래프
	어떤 두 변수 사이의 상관관계를 나타낼때 사용

5) pie()
	원형그래프
	각 항목의 비율을 나타낼 때 사용


3. 자료구조
컴퓨터
   판정, 선택, 응답, 기억의 네가지 주요회로로 구성된 기계

프로그래밍
   문제해결을 위하여 수행할 작업을 단위작업으로 나누고
   어떻게 수행해야 문제를 해결할 수 있는지 연구하는 것

단위작업
   개발자 입장에서 더이상 분해할 수 있는 기본작업
   ex) 사용자의 로그인과정, 입력된 데이터의 검증 작업 등

코딩
   프로그래밍 된 것을 특정 언어로 번역하는 과정

자료구조
   자료처리를 위하여 컴퓨터가 잘 다룰 수 있는 형태로 표현하는 구조

알고리즘
   문제를 해결하는 절차 또는 순서
   프로그래밍에서 문제해결을 위해 단위작업을 어떤 순서로 어떻게 반복하면
   효과적으로 해결할 수 있는지 연구하는 분야

   컴퓨터 프로그램 : 어떤 데이터를 처리하고 그 결과를 제공
   데이터 : 자료구조를 이용해서 표현
   데이터를 이용해서 주어진 문제를 처리하기 위한 효과적인 절차 : 알고리즘

영어사전 python 단어를 찾는 방법
   방법1) 사전의 첫페이지 첫단어부터 사전의 모든 단어를 순서대로 찾는것
      확실하지만 비효율적인 방법
   방법2) 사전의 단어들이 알파벳 순서로 정렬되어있는 이용하는 방법
      정렬과정을 알고있을 때 효과적인 방법

+) 알고리즘 조건
입력 : 0개 이상의 입력이 존재해야한다
출력 : 1개 이상이 출력이 존재해야한다
명백성 : 각 명령어의 의미가 모호하지 않고 명확해야한다
유한성 : 한정된 수의 단계 후에는 반드시 종료되어야한다
유효성 : 각 명령어들은 실행가능한 연산이어야한다

+) 알고리즘 기술 방법
자연어 : 영어나 한국어와 같은 언어로 기술
흐름도(flowchart)
유사코드(pseudo-code)
특정 프로그래밍 언어

4. 자료구조의 정의 및 분류
1) 자료구조의 정의
   컴퓨터가 다루어야하는 자료가 많은 경우 다루는 방법
   알고리즘을 구현하는데 사용함

2) 물리적으로 구현하는 방법 : 리스트, 연결리스트
   리스트(list) : 데이터를 연이어 저장하는 기술
   연결리스트(linked list) : 각 데이터를 임의의 위치에 저장하고 서로를 연결하는 기술

3) 자료구조의 분류
   단순구조, 선형구조, 비선형구조, 파일구조

자료구조(Data Structure) : 컴퓨터에서 다루는 데이터의 형
단순구조(Simple Structure) : 기본 자료형과 사용자 정의 자료형
   배열(동일한 기본 자료형을 여러개 모은것)
   사용자정의(구조체 함수까지 모아서 자료형으로 선언한 것)
   클래스(구조체에 함수까지 모아서 자료형으로 선언한 것)
   재정의 자료형(def 등을 이용해서 이름을 재정의하거나 넣을 수 있는 종류를 제한하는 것)
선형구조(Linear Structure) : 데이터들이 일렬로 쭉 저장되어있는 형태를 가짐
   일렬로 저장하는 방식 : 리스트(배열기반, 연속방식)
   각 데이터가 다음 데이터의 위치를 가지는 방식 : 연결리스트(포인터기반, 연결방식)
   리스트와 연결리스트의 외 사용방법에 따라 : 스택, 큐, 데크
비선형구조(Non-Linear Structure) : 데이터가 트리형태로 저장되어있다고 생각하고 사용하는 자료구조
         (자료가 순차적이지 않고 복잡한 연결관계를 갖는 형태)
   방식 : 트리, 그래프
파일구조(File Structure) : 다양한 자료구조의 데이터를 파일에 저장하는 방식
   방식 : 순차파일, 색인파일, 직접파일

4) 추상데이터 자료형(ADT : Abstract Data Type)
   어떤 자료들과 자료에 가해지는 연산들을 구체적으로 표시하는 것
   추상의 의미는 어떤(what) 자료나 연산이 제공되는가만을 정의하고
      이들이 어떻게(how) 구현되는가는 정의하지 않는것을 의미함

ex)  가방의 추상자료형
   자료(data) : 여러가지 물건을 넣을 수 있는 저장소
   연산 : 넣고 빼는 연산(insert(), append(), remove(), pop())
      물건의 개수 검사(count())

5. 알고리즘의 성능 분석
   알고리즘의 효율성 : 계산속도와 메모리 사용량으로 평가
      -> 사용하는 자료구조에 따라 큰 영향을 받음

1) 알고리즘의 복잡도 분석
   (ex) 리스트에 추가
   (ex) n²을 구하는 방법(유사코드 작성)
   - 곱셈 연산을 이용해서 n과 n을 곱하는 방법
      sum <- n * n
      대입연산 1, 곱셈연산 1
      복잡도함수 T(n) = 2

   - 덧셈 연산을 이용해서 n을 n번 더하는 방법
      for i <- 1 to n do
         sum <- sum + n
      대입연산 n+1, 덧셈연산 n
      복잡도함수 T(n) = 2n + 1

   - 덧셈연산을 이용해 1을 n * n번 더하는 방법
      for i <- 1 to n do
         for j <- 1 to n do
            sum <- sum + 1
      대입연산 n² + n + 1, 덧셈연산 n²
      복잡도함수 T(n) = 2n² + n + 1

2) 시간 복잡도
	특정 알고리즘이 어떤 문제를 해결하는데 걸리는 시간		
	같은 결과를 나타내는 소스라면 최대한 시간이 적게 걸리는 것이 좋은 소스
	효율적인 알고리즘을 구성하기 위해 시간 복잡도 측면을 고려

점근적 표기법을 사용
	-오메가 표기법: 최상의 경우
	-세타 표기법: 평균의 경우
	-빅오 표기법: 최악의 경우

3) 빅오표기법(Big-O)
	커질수록 차수가 가장 큰 항의 영향이 절대적
	알고리즘이 복잡할 수록 평균 복잡도를 구하기 어려워지기 때문에 최악의 경우로 알고리즘성능을 파악

O(1) < O(log n) < O(n) < O(n log n) < O(n^2) n² < O(2^n) 2ⁿ < O(n!)
O(1)       상수시간, 문제를 해결하는데 오직 한단계만 처리함
O(log n)    로그시간, 문제를 해결하는데 필요한 단계들이 연산마다 
      특정 요인에 의해서 줄어듦
O(n)      직선적 시간, 문제를 해결하기 위한 단계의 수와 
      입력값 n이 1:1 관계를 가짐
O(n log n)   선형로그형, 문제를 해결하기 위한 단계의 수가 
      n * (log2n)번만큼의 수행시간을 가짐
O(n^2) n²    2차시간, 문제를 해결하기 위한 단계의 수는 입력값 n의 제곱

실행시간 확인 코드

import time 
start= time.time()
end=time.time()
print(f"실행시간:{end-start}")

4) 공간복잡도
	알고리즘을 위해서 필요한 메모리의 양
	
	알고리즘 대회 기준 > 문제에서 MB단위로 제시
	보통 대회에서 문제에 메모리 사용량 128MB에서 512MB로 제한
	일반적인 경우 데이터 수가 1000만 단위가 넘지않도록 알고리즘 설계

6. 리스트(List)
	데이터를 일렬로 늘여놓은 형태인 선형자료구조
	순서가 있음

1) 파이썬 내장 리스트의 한계
	-배열 구현
	-배열을 사용할 경우 공간을 미리 확보해야함
	-리스트에서 요소가 얼마나 들어올지 예상하기 어려워 적든 많든 공간낭비가 심함

7. 연결리스트(Linked list)
	링크를 이용해서 리스트를 만든다는 의미
	노드(Node)들이 서로 연결된 형태로 구성된 선형 자료구조
		노드: 데이터(값) +다음 노드의 주소(포인터)