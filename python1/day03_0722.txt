python1 3일차
복습  -> 연산자 -> 컬렉션1

0. 복습

() 함수
print() 출력함수 sep=' ' / end='\n'
type() 타입함수
int() 정수형
float() 실수형
bool() 논리형 
str() 문자열
input() 입력함수 => 자료형 str
		   다른 자료형으로 입력하고 싶을때 반드시 형변환
주석  # 
변수  값을 저장하는 저장공간
     변수명= 값	#값을 변수명에 대입해줘

기본자료형
	int
	float
	bool
	str	인덱스 앞에서부터 0으로 시작
		마이너스 인덱스 뒤에서부터 -1부터 시작
		인덱싱[인덱스번호], 슬라이싱 [시작인덱스: 종료인덱스:스텝값]

%연산자
	int	%d	print('%d' %10)
	float	%f	print('%d%.2f' %(10,3.14))
	bool	%s	print('%s%s' %(True, "안녕"))
	str	%s

str.format()
	print('문자열{}{}'.format("안녕",10))
f-string()
	print(f"문자열 {"안녕"}{1}")

연산자의 우선순위
		최우선	. ()
		단항	-, +, !
		산술	+, -, *, /, //, %, **
		쉬프트(비트연산)
		관계	>, <, >=, <=, ==, !=
		논리	and, or, not
		삼항	참 일 때의 값 if 조건식 else 거짓일 때의 값
		대입연산자	=


1. 연산자
1) 산술연산자
	+/-/*/ 
	/ 나눗셈 그 결과값 자체 출력
	  int/ int=float
	  int/ 0= 오류발생
	// 몫
	% 나머지

+) 복합 대입 연산자
	산술연산자와 대입 연산자를 함께 사용가능
	num1=1
	num1+=10	#산술 연산이 먼저 진행 => num1(1) +10값
			#값이 num1 변수에 대입 => num1=11

2) 관계연산자
	=> 관계연산자의 연산 결과는 항상 bool 타입으로 나온다
	 a > b    : a가 b보다 크니?
        맞으면 True, 틀리면 False
   a < b    : a가 b보다 작니?
        맞으면 True, 틀리면 False
   a >= b    : a가 b보다 크거나같니?
        맞으면 True, 틀리면 False
   a <= b   : a가 b보다 작거나 같니?
        맞으면 True, 틀리면 False
   a == b    : a가 b랑 같니?
        맞으면 True, 틀리면 False
   a != b    : a가 b랑 다르니?
        맞으면 True, 틀리면 False

3) 논리연산자
	   a and b : a도 True, b도 True라면
      결과는 True, 아니면 False
   a or b    : a 혹은 b 둘 중 하나라도 T라면
      결과는 True, 아니면 False
   not a   : a가 True라면 결과는 False
      a가 False라면 결과는 True

4) 시퀀스 연산자
	시퀀스 자료형에서만 사용가능
	문자열, 리스트, 튜플, range()

	+	: 연결 
	*int	: 반복


5) 삼항 연산자
	연산 대상의 개수에 따라 연산자를 분리하면 단항연산자, 이항연산자, 삼항연산자로 분리 가능
	참일 때 if 조건식 else 거짓일때 값

2. 컬렉션(list,tuple,set,dict)
	list	[]	추가, 수정, 삭제가 언제나 가능
			[] 대괄호로 묶어주고 ,(콤마)로 값을 구분
			시퀀스 자료형(인덱스0, 시퀀스 연산자)
	tuple	()	한번 생성되고나면 변경이 불가능(읽기 전용 리스트)
			() 소괄호로 묶어주고 ,(콤마)로 값을 구분
			시퀀스 자료형
	set	{}	중복된 값들의 저장 불가능
			{} 중괄호로 묶어주고 ,(콤마)로 값을 구분
			비시퀀스 자료형
	dict	{key:value} 키+값이 한쌍으로 관리 ,(콤마)로 값을 구분
			key 값은 인덱스 번호처럼 사용가능(키값 중복 불가능)

3. 제어문
	어떤 조건에 의해 프로그램의 흐름을 바꾸는 기능
	조건문
		if문: 특정 조건의 만족여부에 따라 실행
	반복문
		for문: 특정 횟수만큼 반복 실행
		while문: 특정 조건을 만족하는 동안 반복 실행
	기타 제어문
		break: 반복문 강제 탈출
		continue: 즉시 다음 반복 실행
		pass문: 오류없이 다음 코드로 진행

	프로그래밍 언어에서 실행순서를 변경할 때
	조건에 따라 실행해야할 문장을 결정할 때
	특정 문장을 반복할 때

 조건문
	조건에 따라 다른 코드를 실행(분기처리)
 반복문
	동일 코드 반복 실행

4. 조건문을 위한 논리연산

	and	두 값이 모두 True일 때만 True 반환
	or	두 값 중 하나가 True라면 True를 반환
	not	False면 True, True면 False를 반환

- 조건문 
	특정 조건의 만족 여부에 따라 실행
	조건문의 결과(True/False)에 따라 실행되는 구분이 달라짐(분기처리)
	if문, if~else문, if~elif~else문
1) if문
   if : 만약 ~라면
   형식   
   if 조건식:
      if문 안의 문장(조건식이 참일 때 실행)
   if문 밖의 문장(조건식이 거짓일 때 실행 / 조건식이 참일 때 실행되는 문장 다음에 실행됨)

   - if문을 만나면 조건식을 확인한다
   - 만약 조건식이 True라면 if문 안으로 들어와서(들여쓰기) 문장을 실행한다
   - 만약 조건식이 False라면 if문 안으로 들어가지 않고(들여쓰기) 다음 문장을 실행한다













































