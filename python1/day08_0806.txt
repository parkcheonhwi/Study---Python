0. 복습
1) 클래스
   class 클래스명:
      #속성(데이터 속성, 메소드)
      def __init__(self, 매개변수):
         self.변수 = 매개변수
      
      
   객체1 = 클래스명(인수)
   객체1.데이터속성
   객체1.메소드명()

1. 클래스 메소드, 정적 메소드
1) 클래스메소드
   클래스 변수를 사용하는 메소드를 의미
   클래스메소드는 self 사용하지 않기 때문에 인스턴스 변수에는 접근 할 수 없지만
   cls 통해서 클래스 변수에는 접근을 할 수 있다

   - 인스턴스나 클래스 호출
   - 생성된 인스턴스가 없어도 호출가능
   - @classmethod 데코레이터를 표시하고 작성
   - 첫번째 매개변수는 self 사용하지 않고 cls를 사용

2) 정적메소드(static method)
	self를 사용하지 않기 때문에 인스턴스 변수를 사용할 수 없음
	인스턴스를 생성하지 않아도 사용할 수 있다는 점에서 클래스메소드와 비슷
	인스턴스 변수와 클래스 변수를 모두 사용하지 않는 경우에 적절

	-인스턴스 or 클래스 호출
	-생성된 인스턴스가 없어도 호출가능
	-@staticmethod 데코레이터를 표시하고 작성
	-반드시 작성해야할 매개변수가 없음

2. 상속
	기존에 사용 중인 클래스를 바탕으로 새로운 요소를 추가해서 클래스를 다시 정의하는 것
	새로운 클래스는 기존 클래스의 데이터 속성, 메소드를 상속받는 구조로 되어있음

	구분	부모클래스	자식클래스
	의미	상속해주는 클래스	상속을 받는 클래스
	용어	슈퍼클래스	서브클래스
		기반클래스	파생클래스
		상위클래스	하위클래스

1) 서브클래스 정의
	class 슈퍼클래스:
		def 슈퍼클래스에 추가할 메소드(self, 매개변수):
			self.슈퍼클래스에 추가할 데이터 속성=값
	class 서브클래스(슈퍼클래스):
		def 서브클래스에 추가할 메소드(self, 매개변수):
			self.서브클래스에 추가할 데이터 속성=값

2) 상속관계 구현
	IS-A 관계를 구현
	=>-은 -이다 해석할 수 있는 관계를 의미
	ex) 학생은 사람이다
	Student is Person
	서브클래스  슈퍼클래스

3) 서브클래스의 init()
	서브클래스는 슈퍼클래스가 없으면 존재x
	서브클래스의 생성자를 구현할 때는 반드시 슈퍼클래스의 생성자를 먼저 호출하는 코드를 작성

	class 슈퍼클래스:
		def __init__(self, 매개변수):
			self.변수=매개변수
	class 서브클래스(슈퍼클래스):
		def __init__(self, 매개변수):
			super().__init__(매개변수)
			self.변수=매개변수


4) 서브클래스의 인스턴스 자료형
	슈퍼클래스의 객체는 슈퍼클래스의 인스턴스
	서브클래스의 객체는 서브클래스이 인스턴스이면서 슈퍼클래스의 인스턴스

	isinstance(obj,class)
		obj: 확인하고자 하는 객체
		class: 확인하고자 하는 클래스
	#주어진 객체가 특정 클래스의 인스턴스인지 확인하는데 사용하는 함수
	#해당 클래스의 인스턴스이면 True 반환, 그렇지 않으면 False 반환

5) 다형성 > 오버라이딩(재정의)
	서브클래스의 메소드가 슈퍼클래스의 메소드를 대신해 사용하는 것을 의미
	부모 필드에 이미 a()메소드가 존재한다면 부모 생성자가 먼저 호출되기 때문에
	부모의 a()가 먼저 메모리에 올라감, 그 다음 자식 필드를 메모리에 올릴 때 같은 이름의 a()
	메소드가 선언되어있다면 같은 이름으로 두개 만들어지지 않고 기존에 만들어진
	부모의 A()메소드에 자식에서 작성한 내용으로 덮어씌워지게 된다
	

3. 예외처리
	파이썬에서 각종 오류를 처리하기 위함
	예외가 발생시 프로그램이 정상적으로 종료될 수 있도록 다루는 행위

	예외: 개발자가 직접 처리할 수 있는 간단한 문제
	오류: 개발자가 처리할 수 없는 복잡한 문제

1) 예외처리 필요성
	발생된 문제로 인해 프로그램이 비정상적으로 종료되는 것을 막고
	사용자에게 발생한 문제에 대한 정보를 전달하기 위함

2) 예외처리 구조

	try~except
	try:
		예외가 발생할 수 있는 문장
	except:
		예외 발생시 수행할 문장

	try ~except ~else ~finally
	try:
		예외가 발생할 수 있는 문장
	except:
		예외 발생시 수행할 문장
	else: 
		예외 발생x 수행할 문장
	finally:
		예외발생 여부관계없이 수행

+) 추가 정리
	try: 해당 구문안에서 에러 발생시 처리가능 -필수
	except: 에러발생시 수행 -선택이지만 에러를 처리하려면 필수
	else: 에러 없을 때 수행 -선택, except 없이는 올 수 없음
	finally: 에러가 있거나 없거나 상관없이 항상 수행 -선택


3) 강제로 예외 발생시키기
   파이썬이 발생시키는 오류가 아니라 사용자가 발생시키고 싶은 경우에 사용

   ③ raise 예외클래스() #예외클래스는 Exception클래스 또는 Exception를 상속받은 나의 클래스
     raise 예외클래스("문장")