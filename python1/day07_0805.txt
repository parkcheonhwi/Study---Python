day07

p121
리스트 내포
	리스트명=[표현식 for 변수 in 반복가능 객체 if 조건식 ]

	num=[1,2,3]
	new_li=[]
	for i in num:
		new_num=i*2

	num=[n*2 for n in [1,2,3]]


1. 변수
1) 지역변수
	함수 내부에서 선언한 변수
	함수 안에서만 사용 가능

2) 전역변수
	함수 밖에서 선언한 변수
	전체에서 사용 가능
	global문: global문을 사용하면 함수 안에서도 전역변수의 값을 수정할 수 있음
		하지만 바람직하지 않음
		- 전역변수의 이름을 무엇으로 지을 지 예측이 불가능
		- 함수 안에서 함부로 전역변수의 값을 바꾸게 될 경우 어떤 문제가 발생하게 될 지 모름
		=> 매개변수로 값만 복사해서 사용하고 return 값으로 값만 복사하여 돌려주는 방식

	특징			전역변수 지역변수
	함수 안에서읽기		가능	가능
	함수 안에서 수정		불가	가능
	함수 밖에서 일기		가능	불가
	함수 밖에서 수정 		가능	불가




2. 모듈
1) 모듈과 import
	모듈: 파이썬 파일은 모듈이 될 수있음
		언제든지 사용할 수 있는 변수나 함수, 클래스를 모아놓은 파일을 의미

2) 모듈의 사용
	import문을 사용해서 해당 모듈을 import 해야함
	-import: 다른 모듈을 지정해서 읽어들이는 처리를 하는 구문
		from 파일명 import*
		* 모든 것을 의미
3) import 하는 방법
   import 모듈 : 모듈 전체를 가져온다(모든 클래스나 함수등을 사용하고자 할 때)

   from 모듈 import *

   특정 함수만 골라서 가져오기
   from 모듈 import 함수1, 함수2


2. 클래스
1) 클래스 기본 개념
   함수(function)
      특정 기능을 수행하는 코드의 묶음
      클래스안에서 메소드라고함
   클래스(class)
      여러 변수와 함수(메소드)를 묶어서 처리할 수 있는것
      공통된 요소들이 모여있는 하나의 틀
   데이터 속성(data attribute)
      데이터 속성으로 데이터를 정의하는 것
      (self.변수에 데이터 될 값을 대입해서 사용가능)
   메소드(method)
      메소드로 처리를 정의하는 것
      (첫번째 매개변수를 self로 한 함수를 정의)
   속성(attribute)
      데이터 속성과 메소드를 합쳐서 부르는 말
   객체(object)/인스턴스(instance)
      정의한 클래스를 실제로 이용하기 위해 사용
      클래스로부터 생성되는 각각의 존재가 인스턴스

2) 클래스와 객체
   class : 똑같은 무엇인가를 계속 만들어낼 수 있는 설계도면(붕어빵틀, 쿠키틀)
   object : class에 의해서 만들어진 결과물(팥붕어빵, 슈크림붕어빵/초코칩쿠키, 아몬드쿠키)

   - 객체는 속성(상태, 특징)을 가지고 있으며 행위(행동, 동작, 기능)을 할 수 있는 대상
   - 속성은 변수로 구현, 행위는 메소드로 구현
   - 객체를 만들기 위해서는 클래스가 먼저 선언되어야함
   - 클래스를 통해 객체를 만들고 활용할 수 있는 프로그래밍언어를 객체지향 프로그래밍언어라고함
   
3) 클래스 선언
   class 클래스명:   #클래스명 첫글자는 대문자로 작성
      #속성(데이터 속성, 메소드)
      def 메소드명(self, 매개변수): #처리를 나타내는 메소드
         self.변수 = 매개변수 #데이터를 나타내는 변수(데이터 속성)

* self는 객체 구별용 매개변수(인스턴스 자신을 나타냄)
  self.필드명으로 접근하면 여러 객체도 한번의 선언으로 구별하여 다룰수 있게 됨


4) 클래스 사용
   추상적인 개념의 클래스로 객체를 만드는 것을 객체화 작업, 인스턴스화라고 함

[객체화 작업 / 인스턴스화]
객체명 = 클래스명()

[각 속성에 접근]
객체명.변수명
객체명.메소드명()

+) 클래스는 추상적인 개념, 실체화x 객체를 생성하고 그 객체를 사용
	클래스의 필드와 동일하게 생긴 하나의 필드와 복사되면 그 필드안에는 여러 값들이 존재가능
	하나의 저장공간에는 한 개의 값만 담을 수 있기 때문에 객체는 생성된 필드의 주소값을 갖고 있게 됨

5) 생성자(constructor)
	인스턴스가 작성될 때 처음에 반드시 처리되는 메소드
	__init__으로(init: initialize) 처음에 초기화를 시켜준다는 의미
	클래스를 통해 객체를 생성하는 순간 호출되는 특별한 메소드

	def __init__(self, 변수1, 변수2..)
	#인스턴스를 작성할 때 호출되는 메소드
		self.변수1=변수1
		self.변수2=변수2

6) 클래스 변수와 인스턴스 변수
	클래스 변수: 모든 인스턴스가 동일한 값을 사용할 때 모든 인스턴스들이 공유할 수 있는 변수
		클래스명.클래스변수명

	인스턴스 변수: self 키워드를 붙여서 사용함
		객체명.인스턴스변수명

- 인스턴스 변수는 self를 붙여서 사용하고 클래스 변수는 self를 붙이지 않음
- 인스턴스 변수는 객체를 통해서만 접근 가능, 클래스 변수는 객체와 클래스명을 통해서 접근 가능
