복습  -> 제어문(조건문) -> 제어문(반복문)

0. 복습

산술
	복합대입연산자 += -= *= /= //= %= **=
	num1=5
	num1 +=10 #num1 num1 + 10

관계
	결과는 항상 bool 타입으로 나온다

논리
	결과는 항상 bool 타입으로 나온다
삼항
	참일 때 값 if 조건식 else 거짓일 때

시퀀스 연산자
	시퀀스 자료형에서만 사용가능
	+	연결 
	*   int	반복

컬렉션
	list	[1,1,2,3.3,4]	시퀀스 자료형
	tuple	(1,1,2,3.3,4)	시퀀스 자료형
	set	{1,2,3.3,4}		비시퀀스 자료형
	dic	{key1:value1, key2:value1 }	해시테이블

제어문
	조건문	조건에 따라 다른 코드를 실행(분기처리)시킬 때 사용함
	if 조건식:
		if문 안의 문장
	if문 밖의 문장(조건식이 참일 때 실행되는 문장 다음에 실행/ 조건식이 거짓일 때 실행)


2) if~else문
	if ~else => 만약 ~라면, 그렇지 않다면
	if 조건식:
		if문 안의 문장(조건식이 참일 때 실행)
	else:
		else문 안의 문장(조건식이 거짓일 때 실행)

3) if~elif ~else문
	elif문은 반드시 if 문 뒤에 나오며 if 문 없이 독립적으로 사용 불가

	if 조건식1:
		실행문1(조건식1이 참일 때 실행)
	elif 조건식2:
		실행문2(조건식1이 거짓, 조건식2가 참일 때 실행)
	else:	
		실행문(조건식1,2가 모두 거짓일 때 실행)

4) if, elif, else문의 차이
	elif, else 기본적으로 생략 가능
	위의 조건이 만족되지 않는 경우 다음에 체크할 조건부분을 실행(분기)할 수 있다
4) if, elif, else문의 차이
   elif, else 기본적으로 생략이 가능하다
   위의 조건이 만족되지 않는 경우에 다음에 체크할 조건부분을 실행(분기)할 수 있다

5) if~if, if~elif 차이
   if~if문의 경우 항상 두 if문의 조건을 체크함
   if~elif문의 경우 앞의 if문 조건이 만족된다면(True) 뒤에 elif문의 조건은 체크하지 않음



2. 반복문
1) while문
	특정 조건을 만족하는 동안(True) 반복해서 수행
	while 조건식:
		반복할 문장
	while문 바깥문장

2) for문
	범위나 횟수가 정해져있는 동안 반복수행
	
	for 변수 in 반복가능객체(문자열, 리스트, 튜플, 세트, 딕셔너리, range()):
		print(변수명)


3) range() 함수
   필요한 만큼의 숫자를 만들어내는 유용한 기능을 가진 함수

   range(시작값, 종료값, 스텝값)
      변수에는 시작값부터 한번 반복이 끝날 때마다 스텝값만큼 증가하는 int값이 담긴다
      시작값부터 종료값 -1까지 반복을 하게 된다
      range(1, 10, 2) => 1, 3, 5, 7, 9
   range(시작값, 종료값)
      변수에는 시작값부터 한번 반복이 끝날때마다 1씩 증가하는 int값이 담긴다
      시작값부터 종료값 -1까지 반복을 하게 된다
      range(2, 5)   => 2, 3, 4
   range(종료값)
      변수에는 0부터 한번 반복이 끝날 때마다 1씩 증가하는 int값이 담긴다
      0부터 종료값-1까지 반복을 하게 된다
      range(10)   => 0, 1, 2, 3, 4, 5, 6, 7, 8, 9
		

	





















